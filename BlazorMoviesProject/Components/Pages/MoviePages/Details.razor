@page "/movies/details"
@using Microsoft.EntityFrameworkCore
@using BlazorMoviesProject.Data
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorMoviesProject.Components.Shared
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h2>@movie.Title (@movie.Year)</h2>
        <p><strong>Average Rating:</strong> @movie.Rating / 5</p>

        @if (!string.IsNullOrEmpty(movie.CoverImagePath))
        {
            <img src="@movie.CoverImagePath" alt="Cover Image" style="max-width:300px;" class="my-3" />
        }

        <div class="mt-3">
            <a href="@($"/movies/edit?id={movie.Id}")">Edit</a> |
            <a href="@($"/movies")">Back to List</a>
        </div>

        <hr />

        <AuthorizeView Context="authContext">
            <Authorized>
                <h3>Add Your Review</h3>
                <EditForm Model="newReview" OnValidSubmit="HandleAddReview">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label>Rating (0 - 5, step 0.5):</label>
                        <InputNumber @bind-Value="newReview.Rating" class="form-control" step="0.5" min="0" max="5" />
                    </div>

                    <div class="mb-3">
                        <label>Content:</label>
                        <InputTextArea @bind-Value="newReview.Content" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-primary">Add Review</button>
                </EditForm>
            </Authorized>
            <NotAuthorized>
                <p><em>Log in to add a review.</em></p>
            </NotAuthorized>
        </AuthorizeView>

        <hr />

        <h3>Reviews</h3>
        @if (reviews.Any())
        {
            @foreach (var review in reviews)
            {
                <div class="card my-2">
                    <div class="card-body">
                        <h5>Rating: @review.Rating / 5</h5>
                        <p>@review.Content</p>

                        <AuthorizeView Context="authContext2">
                            <Authorized>
                                @if (review.UserId == userId)
                                {
                                    <button class="btn btn-warning me-2" @onclick="() => StartEditing(review)">Edit</button>
                                    <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(review.Id)">Delete</button>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No reviews yet.</p>
        }
    }
</div>

<DeleteConfirmationDialog IsVisible="@showDeleteDialog"
                          Title="Potwierdź usunięcie"
                          Message="Czy na pewno chcesz usunąć tę recenzję? Tej operacji nie można cofnąć."
                          OnConfirm="ConfirmDelete"
                          OnCancel="CancelDelete" />

@code {
    private Movie? movie;
    private List<Review> reviews = new();
    private Review newReview = new();
    private string? userId;
    private bool showDeleteDialog = false;
    private int reviewToDeleteId;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadMovie();
    }

    private async Task LoadMovie()
    {
        movie = await DbContext.Movies.Include(m => m.Reviews).FirstOrDefaultAsync(m => m.Id == Id);
        reviews = movie?.Reviews ?? new List<Review>();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(c => c.Type == "sub" || c.Type.Contains("nameidentifier"))?.Value;
        }
    }

    private async Task HandleAddReview()
    {
        if (userId == null || movie == null) return;

        newReview.Rating = (float)Math.Round(newReview.Rating * 2, MidpointRounding.AwayFromZero) / 2;
        newReview.UserId = userId;
        newReview.MovieId = movie.Id;

        DbContext.Reviews.Add(newReview);
        await DbContext.SaveChangesAsync();

        await UpdateMovieRating(movie.Id);

        newReview = new();
        await LoadMovie();
    }

    private void StartEditing(Review review)
    {
        NavigationManager.NavigateTo($"/reviews/edit?id={review.Id}");
    }

    private void ShowDeleteConfirmation(int reviewId)
    {
        reviewToDeleteId = reviewId;
        showDeleteDialog = true;
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
    }

    private async Task ConfirmDelete()
    {
        await DeleteReview(reviewToDeleteId);
        showDeleteDialog = false;
    }

    private async Task DeleteReview(int reviewId)
    {
        var review = await DbContext.Reviews.FindAsync(reviewId);
        if (review != null && review.UserId == userId)
        {
            DbContext.Reviews.Remove(review);
            await DbContext.SaveChangesAsync();
            await UpdateMovieRating(review.MovieId);
            await LoadMovie();
        }
    }

    private async Task UpdateMovieRating(int movieId)
    {
        var movieToUpdate = await DbContext.Movies.Include(m => m.Reviews)
                                                  .FirstOrDefaultAsync(m => m.Id == movieId);

        if (movieToUpdate != null)
        {
            if (movieToUpdate.Reviews.Any())
            {
                var avg = movieToUpdate.Reviews.Average(r => r.Rating);
                movieToUpdate.Rating = (float)Math.Round(avg * 2, MidpointRounding.AwayFromZero) / 2;
            }
            else
            {
                movieToUpdate.Rating = 0;
            }
            await DbContext.SaveChangesAsync();
        }
    }
}
