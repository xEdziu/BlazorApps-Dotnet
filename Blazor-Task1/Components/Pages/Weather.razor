@page "/weather"
@attribute [StreamRendering]
@rendermode @( new InteractiveServerRenderMode ( false ))

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<div class="mb-3">
    <label for="nameFilter" class="form-label">Filtruj po nazwie:</label>
    <input id="nameFilter" class="form-control" @oninput="Input" />
</div>

@if (displayedForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in displayedForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
<p>
    <strong>Number of warm days:</strong> @warmDays
</p>

<div class="mt-3">
    <button class="btn btn-primary" @onclick="() => WarmDaysFilter(15)">Pokaż ciepłe dni (>15°C)</button>
    <button class="btn btn-secondary ms-2" @onclick="RestoreData">Przywróć wszystkie dane</button>
</div>
<br />

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? displayedForecasts;
    private int warmDays = 0;
    private string? nameFilter;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        // Count warm days
        foreach (var forecast in forecasts)
        {
            if (forecast.TemperatureC > 15)
            {
                warmDays++;
            }
        }

        displayedForecasts = forecasts;
    }

    private void WarmDaysFilter(int temperatureThreshold)
    {
        displayedForecasts = forecasts?
            .Where(f => f.TemperatureC > temperatureThreshold)
            .ToArray();
    }

    private void RestoreData()
    {
        displayedForecasts = forecasts;
    }

    private void Input(ChangeEventArgs arg)
    {
        nameFilter = arg.Value?.ToString();

        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            displayedForecasts = forecasts;
        }
        else
        {
            displayedForecasts = forecasts?
                .Where(f => f.Summary != null && f.Summary.Contains(nameFilter, StringComparison.OrdinalIgnoreCase))
                .ToArray();
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
